#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main(){
    int n, m, k;  // อ่านค่าขนาดของอาร์เรย์ (n), จำนวนคำถาม (m), และค่าคงที่ k
    cin >> n >> m >> k;  // รับค่าจาก input
    vector<int> ar(n);  // สร้างอาร์เรย์ ar ขนาด n
    for(int i=0; i<n; i++){
        cin >> ar[i];  // รับค่าจาก input และเก็บในอาร์เรย์ ar
    }
    // คำนวณค่า prefix sum โดยการทำให้แต่ละค่าของ ar[i] เป็นผลรวมของ ar[0] ถึง ar[i]
    for(int i=1; i<n; i++){
        ar[i] += ar[i-1];  // ar[i] จะเป็นผลรวมของค่าก่อนหน้า
    }
    // เพิ่มค่า k*(i+1) ให้กับแต่ละตำแหน่งใน ar
    // ค่านี้คือการปรับค่าตามลำดับที่ต้องการตามโจทย์ (ค่าที่เพิ่มตามลำดับ)
    for(int i=0; i<n; i++){
        ar[i] += (k*(i+1));  // เพิ่มค่า k*(i+1) ให้กับ ar[i]
    }
    // เริ่มทำคำถาม m ครั้ง
    for(int i=0; i<m; i++){
        int a, b;  // รับค่าคำถาม a และ b
        cin >> a >> b;  // อ่านค่าคำถาม

        int temp;  // ตัวแปรสำหรับเก็บค่าที่คำนวณในแต่ละคำถาม
        if(a > 0){
            // กรณีที่ a > 0:
            temp = b + ar[a-1];  // คำนวณค่าชั่วคราว โดยการเพิ่มค่า b กับ ar[a-1]
            // ใช้ `upper_bound` เพื่อหาตำแหน่งแรกใน ar ที่มีค่ามากกว่า temp
            auto itr = upper_bound(ar.begin(), ar.end(), temp);  
            if(itr == ar.begin()) {
                // ถ้าไม่พบตำแหน่งที่มีค่ามากกว่า temp
                cout << 0 << "\n";  // แสดงผลเป็น 0 แล้วข้ามไป
                continue;
            }
            itr--;  // ถ้าพบ ก็ย้อนไปหาตำแหน่งก่อนหน้า
            // คำนวณผลลัพธ์โดยการหาผลต่างระหว่างค่าปัจจุบันและค่าก่อนหน้า
            cout << (*(itr) - ar[a-1] - (k*(itr - ar.begin() + 1 - a))) << "\n";
        }
        else if(a == 0){
            // กรณีที่ a == 0:
            auto itr = upper_bound(ar.begin(), ar.end(), b);  // ค้นหาตำแหน่งที่มีค่ามากกว่า b
            if(itr == ar.begin()) {
                // ถ้าไม่พบตำแหน่งที่มีค่ามากกว่า b
                cout << 0 << "\n";  // แสดงผลเป็น 0
                continue;
            }
            itr--;  // ถ้าพบค่าที่มากกว่า b ก็ไปหาค่าก่อนหน้า
            // คำนวณผลลัพธ์โดยหาผลต่างระหว่างค่าปัจจุบันและค่าก่อนหน้า
            cout << (*(itr) - (k*(itr - ar.begin() + 1))) << "\n";
        }
    }
}
