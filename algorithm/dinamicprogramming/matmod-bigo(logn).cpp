#include <iostream>
#include <vector>
using namespace std;
#define ll long long

// ตัวแปรสำหรับเก็บค่าเมทริกซ์ (มีขนาด 4 ค่า) และค่าของ n และ k
vector<int> mat(4);
ll n;  // กำลังที่จะยก
int k;  // โมดูลัส

// ฟังก์ชันคูณเมทริกซ์ 2 ตัว (a, b) และหาผลลัพธ์ในรูปแบบเมทริกซ์
vector<int> cal(vector<int>a, vector<int>b) {
    return {
        (a[0] % k * b[0] % k + a[1] % k * b[2] % k) % k,  // คูณแถวที่ 1 คอลัมน์ 1
        (a[0] % k * b[1] % k + a[1] % k * b[3] % k) % k,  // คูณแถวที่ 1 คอลัมน์ 2
        (a[2] % k * b[0] % k + a[3] % k * b[2] % k) % k,  // คูณแถวที่ 2 คอลัมน์ 1
        (a[2] % k * b[1] % k + a[3] % k * b[3] % k) % k   // คูณแถวที่ 2 คอลัมน์ 2
    };
}

// ฟังก์ชันคำนวณผลของเมทริกซ์ที่ยกกำลัง ex
vector<int> solve(ll ex) {
    // ถ้า ex == 0 ผลลัพธ์คือเมทริกซ์เอกลักษณ์
    if(ex == 0) return {1, 0, 0, 1};

    // ถ้า ex == 1 ผลลัพธ์คือตัวเมทริกซ์เอง
    if(ex == 1) return mat;

    // คำนวณผลของเมทริกซ์ที่ยกกำลังครึ่งหนึ่ง (ex / 2)
    auto t = solve(ex >> 1); // การ shift ขวาคือการหารด้วย 2

    // ถ้า ex เป็นเลขคี่ (ex & 1 จะเป็น 1)
    return ex & 1 ? cal(cal(t, t), mat) : cal(t, t); // ถ้าเลขคี่, คูณผลลัพธ์กับ mat เพิ่มเติม
}

// ฟังก์ชันหลัก (main)
int main() {
    // อ่านค่าจาก input
    scanf("%lld%d", &n, &k);  // n คือกำลัง, k คือโมดูลัส
    for(int i = 0; i < 4; ++i) scanf("%d", &mat[i]);  // อ่านค่าของเมทริกซ์ mat

    // เรียกฟังก์ชัน solve เพื่อคำนวณเมทริกซ์ที่ยกกำลัง n
    for(auto &x: solve(n))  // ใช้ for-each loop เพื่อพิมพ์ผลลัพธ์
        printf("%d ", x);    // แสดงผลลัพธ์ของเมทริกซ์ที่ยกกำลังแล้ว

    return 0;
}
