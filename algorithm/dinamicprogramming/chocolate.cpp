#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;

int main() {
    int n, k; 
    cin >> n >> k;  // รับค่าจำนวนชิ้นช็อกโกแลต (n) และขนาดของเซ็ต S (k)

    // สร้าง dp array สำหรับเก็บจำนวนวิธีที่จะแบ่งช็อกโกแลตในแต่ละจำนวนชิ้น
    vector<int> dp(n+1, 0); // dp[i] หมายถึงจำนวนวิธีที่แบ่งช็อกโกแลต i ชิ้นได้
    dp[0] = 1; // Base case: มี 0 ชิ้น มีวิธีเดียวที่จะไม่กินเลย

    // อ่านค่าในเซ็ต S
    vector<int> s(k); // เก็บสมาชิกในเซ็ต S
    for (int i = 0; i < k; i++) {
        cin >> s[i]; // อ่านค่าทีละตัว
    }

    // เรียงค่าของ S เพื่อช่วยในการจัดการลำดับการคำนวณ (ไม่จำเป็นต้องทำในปัญหานี้ แต่ช่วยให้โค้ดทั่วไปอ่านง่ายขึ้น)
    sort(s.begin(), s.end());

    // คำนวณ dp สำหรับแต่ละจำนวนชิ้นช็อกโกแลต
    for (int i = 1; i <= n; i++) { // ไล่คำนวณ dp[i] สำหรับ 1 ถึง n
        for (int j = 0; j < k; j++) { // ลองใช้ทุกค่าใน S
            if (i - s[j] < 0) break; // ถ้ากินแล้วเหลือติดลบก็หยุดทันที
            dp[i] += dp[i - s[j]];   // เพิ่มจำนวนวิธีจาก dp[i - s[j]]
        }
    }

    // แสดงผลคำตอบสุดท้าย คือ dp[n] ซึ่งเป็นจำนวนวิธีที่จะแบ่งช็อกโกแลต n ชิ้น
    cout << dp[n]; 
}
